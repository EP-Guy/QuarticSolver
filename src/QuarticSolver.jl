"""
Finds roots of 4th order polynomials of the form
```math
ax‚Å¥ + bx¬≥ + cx¬≤ + dx + e = 0
```
based on the Fast Quartic and Cubic Solver
https://github.com/NKrvavica/fqs
by Nino Krvavica.
"""
module QuarticSolver

using StaticArrays

function solvequadratic(a0, b0, c0)
    inva0 = 1/a0
    a, b = b0*inva0, c0*inva0

    a‚ÇÄ = -0.5*a
    Œî = a‚ÇÄ^2 - b
    sqrtŒî = sqrt(complex(Œî))

    r1 = a‚ÇÄ - sqrtŒî
    r2 = a‚ÇÄ + sqrtŒî

    return r1, r2
end

function solvecubic(a0, b0, c0, d0)
    inva0 = 1/a0
    a, b, c = b0*inva0, c0*inva0, d0*inva0

    third = 1/3
    thirda = a*third
    thirda¬≤ = thirda^2
    sqrt3 = sqrt(3)

    f = third*b - thirda¬≤
    g = thirda*(2*thirda¬≤ - b) + c
    h = 0.25*g^2 + f^3  # discriminant (`Œî` or `d` in some papers)

    if f == g == h == 0  # this check seems a little strong
        r1 = -cbrt(c)
        return r1, r1, r1
    elseif h isa Complex || h <= 0   # casus irreducibilis
        j = sqrt(-f)
        k = acos(-0.5*g/j^3)
        m = cos(third*k)
        n = sqrt3*sin(third*k)
        r1 = 2*j*m - thirda
        r2 = -j*(m + n) - thirda
        r3 = -j*(m - n) - thirda
        return r1, r2, r3
    else
        sqrth = sqrt(h)
        S = cbrt(-0.5*g + sqrth)
        U = cbrt(-0.5*g - sqrth)
        SplusU = S + U
        SminusU = S - U
        tmp = SminusU*sqrt3*0.5im
        r1 = SplusU - thirda
        r2 = -0.5*SplusU - thirda + tmp
        r3 = -0.5*SplusU - thirda - tmp
        return r1, r2, r3
    end
end

function solvequartic(a0, b0, c0, d0, e0)
    inva0 = 1/a0
    a, b, c, d = b0*inva0, c0*inva0, d0*inva0, e0*inva0

    a‚ÇÄ = 0.25*a
    a‚ÇÄ¬≤ = a‚ÇÄ^2

    # Subsidiary cubic equation
    p = 3*a‚ÇÄ¬≤ - 0.5*b
    q = a*a‚ÇÄ¬≤ - b*a‚ÇÄ + 0.5*c
    r = 3*a‚ÇÄ¬≤^2 - b*a‚ÇÄ¬≤ + c*a‚ÇÄ - d

    # One root of cubic
    z0, _, _ = solvecubic(1, p, r, p*r-0.5*q^2)
    z0 = complex(z0)

    s = sqrt(2*p + 2*z0)
    s == 0 ? t = z0^2 + r : t = -q/s

    r0, r1 = solvequadratic(1, s, z0 + t)
    r2, r3 = solvequadratic(1, -s, z0 - t)

    return r0-a‚ÇÄ, r1-a‚ÇÄ, r2-a‚ÇÄ, r3-a‚ÇÄ
end

# function sortroots(r1, r2, r3, r4)
#     r2 > r1 && ((r1, r2) = (r2, r1))
#     r4 > r3 && ((r3, r4) = (r4, r3))
#     r3 > r2 && ((r2, r3) = (r3, r2))
#     return r1, r2, r3, r4
# end

function sortroots(r1, r2, r3, r4)
    ar1, ar2, ar3, ar4 = abs(r1), abs(r2), abs(r3), abs(r4)
    ar1 > ar2 > ar3 > ar4 && return r1, r2, r3, r4
    ar1 > ar2 > ar4 > ar3 && return r1, r2, r4, r3
    ar1 > ar3 > ar2 > ar4 && return r1, r3, r2, r4
    ar1 > ar3 > ar4 > ar2 && return r1, r3, r4, r2
    ar1 > ar4 > ar2 > ar3 && return r1, r4, r2, r3
    ar1 > ar4 > ar3 > ar2 && return r1, r4, r3, r2
    ar2 > ar1 > ar3 > ar4 && return r2, r1, r3, r4
    ar2 > ar1 > ar4 > ar3 && return r2, r1, r4, r3
    ar2 > ar3 > ar1 > ar4 && return r2, r3, r1, r4
    ar2 > ar3 > ar4 > ar1 && return r2, r3, r4, r1
    ar2 > ar4 > ar1 > ar3 && return r2, r4, r1, r3
    ar2 > ar4 > ar3 > ar1 && return r2, r4, r3, r1
    ar3 > ar1 > ar2 > ar4 && return r3, r1, r2, r4
    ar3 > ar1 > ar4 > ar2 && return r3, r1, r4, r2
    ar3 > ar2 > ar1 > ar4 && return r3, r2, r1, r4
    ar3 > ar2 > ar4 > ar1 && return r3, r2, r4, r1
    ar3 > ar4 > ar1 > ar2 && return r3, r4, r1, r2
    ar3 > ar4 > ar2 > ar1 && return r3, r4, r2, r1
    ar4 > ar1 > ar2 > ar3 && return r4, r1, r2, r3
    ar4 > ar1 > ar3 > ar2 && return r4, r1, r3, r2
    ar4 > ar2 > ar1 > ar3 && return r4, r2, r1, r3
    ar4 > ar2 > ar3 > ar1 && return r4, r2, r3, r1
    ar4 > ar3 > ar1 > ar2 && return r4, r3, r1, r2
    ar4 > ar3 > ar2 > ar1 && return r4, r3, r2, r1
end

function refine(r1, r2, r3, r4)
    a, b, c, d = sortroots(r1, r2, r3, r4)

    # Initial estimates, 2 paths required
    Œ±‚ÇÄ‚ÇÅ = -real(r1 + r2)
    Œ≤‚ÇÄ‚ÇÅ = real(r1*r2)

    Œ±‚ÇÄ‚ÇÇ = -real(r2 + r3)
    Œ≤‚ÇÄ‚ÇÇ = real(r2*r3)

    Œ≥‚ÇÄ‚ÇÅ, Œ¥‚ÇÄ‚ÇÅ = fls(a, b, c, d, Œ±‚ÇÄ‚ÇÅ, Œ≤‚ÇÄ‚ÇÅ)
    Œ≥‚ÇÄ‚ÇÇ, Œ¥‚ÇÄ‚ÇÇ = fls(a, b, c, d, Œ±‚ÇÄ‚ÇÇ, Œ≤‚ÇÄ‚ÇÇ)

    Œ±, Œ≤, Œ≥, Œ¥ = optimize(a, b, c, d, Œ±‚ÇÄ‚ÇÅ, Œ≤‚ÇÄ‚ÇÅ, Œ≥‚ÇÄ‚ÇÅ, Œ¥‚ÇÄ‚ÇÅ, Œ±‚ÇÄ‚ÇÇ, Œ≤‚ÇÄ‚ÇÇ, Œ≥‚ÇÄ‚ÇÇ, Œ¥‚ÇÄ‚ÇÇ)
    r1, r2 = solvequadratic(1, Œ±, Œ≤)
    r3, r4 = solvequadratic(1, Œ≥, Œ¥)

    return r1, r2, r3, r4
end

function optimize(a, b, c, d,
                  Œ±‚ÇÅ, Œ≤‚ÇÅ, Œ≥‚ÇÅ, Œ¥‚ÇÅ,
                  Œ±‚ÇÇ, Œ≤‚ÇÇ, Œ≥‚ÇÇ, Œ¥‚ÇÇ)
    numiter = 10
    œµ‚ÇÅ = totalerror(a, b, c, d)
    œµ‚ÇÇ = totalerror(a, b, c, d)
    œµ‚ÇÅvec = MVector{numiter,typeof(œµ‚ÇÅ)}(undef)
    œµ‚ÇÇvec = MVector{numiter,typeof(œµ‚ÇÇ)}(undef)

    iter = 1
    while iter <= numiter
        Œ±‚ÇÅ, Œ≤‚ÇÅ, Œ≥‚ÇÅ, Œ¥‚ÇÅ = backwardoptimize(a, b, c, d, Œ±‚ÇÅ, Œ≤‚ÇÅ, Œ≥‚ÇÅ, Œ¥‚ÇÅ)
        Œ±‚ÇÇ, Œ≤‚ÇÇ, Œ≥‚ÇÇ, Œ¥‚ÇÇ = backwardoptimize(a, b, c, d, Œ±‚ÇÇ, Œ≤‚ÇÇ, Œ≥‚ÇÇ, Œ¥‚ÇÇ)

        e‚ÇÅ‚ÇÅ, e‚ÇÅ‚ÇÇ, e‚ÇÅ‚ÇÉ, e‚ÇÅ‚ÇÑ = err(a, b, c, d, Œ±‚ÇÅ, Œ≤‚ÇÅ, Œ≥‚ÇÅ, Œ¥‚ÇÅ)
        e‚ÇÇ‚ÇÅ, e‚ÇÇ‚ÇÇ, e‚ÇÇ‚ÇÉ, e‚ÇÇ‚ÇÑ = err(a, b, c, d, Œ±‚ÇÇ, Œ≤‚ÇÇ, Œ≥‚ÇÇ, Œ¥‚ÇÇ)
        œµ‚ÇÅ = totalerror(e‚ÇÅ‚ÇÅ, e‚ÇÅ‚ÇÇ, e‚ÇÅ‚ÇÉ, e‚ÇÅ‚ÇÑ)
        œµ‚ÇÇ = totalerror(e‚ÇÇ‚ÇÅ, e‚ÇÇ‚ÇÇ, e‚ÇÇ‚ÇÉ, e‚ÇÇ‚ÇÑ)

        œµ‚ÇÅvec[iter] = œµ‚ÇÅ
        œµ‚ÇÇvec[iter] = œµ‚ÇÇ

        if iter > 3
            complete(œµ‚ÇÅ, view(œµ‚ÇÅvec, iter-3:iter)) && return Œ±‚ÇÅ, Œ≤‚ÇÅ, Œ≥‚ÇÅ, Œ¥‚ÇÅ
            complete(œµ‚ÇÇ, view(œµ‚ÇÇvec, iter-3:iter)) && return Œ±‚ÇÇ, Œ≤‚ÇÇ, Œ≥‚ÇÇ, Œ¥‚ÇÇ
        else
            œµ‚ÇÅ == 0 && return Œ±‚ÇÅ, Œ≤‚ÇÅ, Œ≥‚ÇÅ, Œ¥‚ÇÅ
            œµ‚ÇÇ == 0 && return Œ±‚ÇÇ, Œ≤‚ÇÇ, Œ≥‚ÇÇ, Œ¥‚ÇÇ
        end

        iter += 1
    end

    if œµ‚ÇÅ < œµ‚ÇÇ
        return (Œ±‚ÇÅ, Œ≤‚ÇÅ, Œ≥‚ÇÅ, Œ¥‚ÇÅ)
    else
        return (Œ±‚ÇÇ, Œ≤‚ÇÇ, Œ≥‚ÇÇ, Œ¥‚ÇÇ)
    end
end

# complete(œµ, œµvec) = œµ == 0 || any(œµ == e for e in œµvec)
complete(œµ, œµvec) = œµ == 0 || œµ in œµvec

function fls(a, b, c, d, Œ±‚ÇÄ, Œ≤‚ÇÄ)
    ùõ∑‚ÇÅ = 1 + Œ±‚ÇÄ^2 + Œ≤‚ÇÄ^2
    ùõ∑‚ÇÇ = Œ±‚ÇÄ*(1 + Œ≤‚ÇÄ)

    c‚ÇÅ = a - Œ±‚ÇÄ + Œ±‚ÇÄ*(b - Œ≤‚ÇÄ) + Œ≤‚ÇÄ*c
    c‚ÇÇ = b - Œ≤‚ÇÄ + Œ±‚ÇÄ*c + Œ≤‚ÇÄ*d

    L‚ÇÅ = sqrt(ùõ∑‚ÇÅ)
    L‚ÇÉ = ùõ∑‚ÇÇ/L‚ÇÅ
    L‚ÇÇ = sqrt(ùõ∑‚ÇÅ - ùõ∑‚ÇÇ/ùõ∑‚ÇÅ*ùõ∑‚ÇÇ)

    y‚ÇÅ = c‚ÇÅ/L‚ÇÅ
    y‚ÇÇ = (c‚ÇÇ - y‚ÇÅ*L‚ÇÉ)/L‚ÇÇ

    Œ¥‚ÇÄ = y‚ÇÇ/L‚ÇÇ
    Œ≥‚ÇÄ = (y‚ÇÅ - Œ¥‚ÇÄ*L‚ÇÉ)/L‚ÇÅ

    return Œ≥‚ÇÄ, Œ¥‚ÇÄ
end

totalerror(e‚ÇÅ, e‚ÇÇ, e‚ÇÉ, e‚ÇÑ) = abs(e‚ÇÅ) + abs(e‚ÇÇ) + abs(e‚ÇÉ) + abs(e‚ÇÑ)

function err(a, b, c, d, Œ±, Œ≤, Œ≥, Œ¥)
    e‚ÇÅ = a - Œ± - Œ≥
    e‚ÇÇ = b - Œ≤ - Œ±*Œ≥ - Œ¥
    e‚ÇÉ = c - Œ≤*Œ≥ - Œ±*Œ¥
    e‚ÇÑ = d - Œ≤*Œ¥

    return e‚ÇÅ, e‚ÇÇ, e‚ÇÉ, e‚ÇÑ
end

"""
Strobach 2010 The fast quartic solver
"""
function backwardoptimize(x‚ÇÅ, x‚ÇÇ, x‚ÇÉ, x‚ÇÑ, Œ±, Œ≤, Œ≥, Œ¥)
    e‚ÇÅ, e‚ÇÇ, e‚ÇÉ, e‚ÇÑ = err(x‚ÇÅ, x‚ÇÇ, x‚ÇÉ, x‚ÇÑ, Œ±, Œ≤, Œ≥, Œ¥)

    U‚ÇÇ‚ÇÉ = Œ± - Œ≥
    U‚ÇÉ‚ÇÉ = Œ≤ - Œ¥ - Œ≥*U‚ÇÇ‚ÇÉ
    L‚ÇÑ‚ÇÉ = -Œ¥*U‚ÇÇ‚ÇÉ/U‚ÇÉ‚ÇÉ
    U‚ÇÑ‚ÇÑ = Œ≤ - Œ¥ - L‚ÇÑ‚ÇÉ*U‚ÇÇ‚ÇÉ

    x‚ÇÅ = e‚ÇÅ
    x‚ÇÇ = e‚ÇÇ - Œ≥*x‚ÇÅ
    x‚ÇÉ = e‚ÇÉ - Œ¥*x‚ÇÅ - Œ≥*x‚ÇÇ
    x‚ÇÑ = e‚ÇÑ - Œ¥*x‚ÇÇ - L‚ÇÑ‚ÇÉ*x‚ÇÉ

    y‚ÇÑ = x‚ÇÑ/U‚ÇÑ‚ÇÑ
    y‚ÇÉ = (x‚ÇÉ - U‚ÇÇ‚ÇÉ*y‚ÇÑ)/U‚ÇÉ‚ÇÉ
    y‚ÇÇ = x‚ÇÇ - U‚ÇÇ‚ÇÉ*y‚ÇÉ - y‚ÇÑ
    y‚ÇÅ = x‚ÇÅ - y‚ÇÉ

    Œ± += y‚ÇÅ
    Œ≤ += y‚ÇÇ
    Œ≥ += y‚ÇÉ
    Œ¥ += y‚ÇÑ

    return Œ±, Œ≤, Œ≥, Œ¥
end


computequartic(a, b, c, d, e, x) = a*x[1]^4 + b*x[2]^3 + c*x[3]^2 + d*x[4] + e

end # module
